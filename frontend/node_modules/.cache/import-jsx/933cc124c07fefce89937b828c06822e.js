'use strict';

const React = require('react');
const {
  Text,
  Box
} = require('ink');
const importJsx = require('import-jsx');
const gltfjsx = require('../gltfjsx');
const ErrorBoundary = importJsx('./ErrorBoundary');
function Conversion({
  file,
  ...config
}) {
  let nameExt = file.match(/[-_\w]+[.][\w]+$/i)[0];
  let name = nameExt.split('.').slice(0, -1).join('.');
  let output = name.charAt(0).toUpperCase() + name.slice(1) + (config.types ? '.tsx' : '.js');
  const [done, setDone] = React.useState(false);
  const [log, setLog] = React.useState([]);
  React.useEffect(() => {
    async function run() {
      try {
        await gltfjsx(file, output, {
          ...config,
          setLog,
          timeout: 0,
          delay: 5
        });
        setDone(true);
      } catch (e) {
        setDone(() => {
          throw e;
        });
      }
    }
    run();
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, !done && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "black",
    backgroundColor: "white"
  }, ' Parse '), /*#__PURE__*/React.createElement(Text, null, " ", (log[log.length - 1] || '').trim())), done && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "black",
    backgroundColor: "green"
  }, ' Done: '), /*#__PURE__*/React.createElement(Text, null, " ", output)));
}
module.exports = function App(props) {
  return /*#__PURE__*/React.createElement(ErrorBoundary, null, /*#__PURE__*/React.createElement(Conversion, props));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwiaW1wb3J0SnN4IiwiZ2x0ZmpzeCIsIkVycm9yQm91bmRhcnkiLCJDb252ZXJzaW9uIiwiZmlsZSIsImNvbmZpZyIsIm5hbWVFeHQiLCJtYXRjaCIsIm5hbWUiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsIm91dHB1dCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwidHlwZXMiLCJkb25lIiwic2V0RG9uZSIsInVzZVN0YXRlIiwibG9nIiwic2V0TG9nIiwidXNlRWZmZWN0IiwicnVuIiwidGltZW91dCIsImRlbGF5IiwiZSIsImxlbmd0aCIsInRyaW0iLCJtb2R1bGUiLCJleHBvcnRzIiwiQXBwIiwicHJvcHMiXSwic291cmNlcyI6WyJBcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbmNvbnN0IHsgVGV4dCwgQm94IH0gPSByZXF1aXJlKCdpbmsnKVxuY29uc3QgaW1wb3J0SnN4ID0gcmVxdWlyZSgnaW1wb3J0LWpzeCcpXG5jb25zdCBnbHRmanN4ID0gcmVxdWlyZSgnLi4vZ2x0ZmpzeCcpXG5jb25zdCBFcnJvckJvdW5kYXJ5ID0gaW1wb3J0SnN4KCcuL0Vycm9yQm91bmRhcnknKVxuXG5mdW5jdGlvbiBDb252ZXJzaW9uKHsgZmlsZSwgLi4uY29uZmlnIH0pIHtcbiAgbGV0IG5hbWVFeHQgPSBmaWxlLm1hdGNoKC9bLV9cXHddK1suXVtcXHddKyQvaSlbMF1cbiAgbGV0IG5hbWUgPSBuYW1lRXh0LnNwbGl0KCcuJykuc2xpY2UoMCwgLTEpLmpvaW4oJy4nKVxuICBsZXQgb3V0cHV0ID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSkgKyAoY29uZmlnLnR5cGVzID8gJy50c3gnIDogJy5qcycpXG5cbiAgY29uc3QgW2RvbmUsIHNldERvbmVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtsb2csIHNldExvZ10gPSBSZWFjdC51c2VTdGF0ZShbXSlcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGdsdGZqc3goZmlsZSwgb3V0cHV0LCB7IC4uLmNvbmZpZywgc2V0TG9nLCB0aW1lb3V0OiAwLCBkZWxheTogNSB9KVxuICAgICAgICBzZXREb25lKHRydWUpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNldERvbmUoKCkgPT4ge1xuICAgICAgICAgIHRocm93IGVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgcnVuKClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgeyFkb25lICYmIChcbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VGV4dCBjb2xvcj1cImJsYWNrXCIgYmFja2dyb3VuZENvbG9yPVwid2hpdGVcIj5cbiAgICAgICAgICAgIHsnIFBhcnNlICd9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0PiB7KGxvZ1tsb2cubGVuZ3RoIC0gMV0gfHwgJycpLnRyaW0oKX08L1RleHQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgKX1cbiAgICAgIHtkb25lICYmIChcbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8VGV4dCBjb2xvcj1cImJsYWNrXCIgYmFja2dyb3VuZENvbG9yPVwiZ3JlZW5cIj5cbiAgICAgICAgICAgIHsnIERvbmU6ICd9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0PiB7b3V0cHV0fTwvVGV4dD5cbiAgICAgICAgPC9Cb3g+XG4gICAgICApfVxuICAgIDwvPlxuICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXBwKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEVycm9yQm91bmRhcnk+XG4gICAgICA8Q29udmVyc2lvbiB7Li4ucHJvcHN9IC8+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